import random

import telebot  # –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–æ–º
from telebot import types  # –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫

import main
from config import token
import sql_requests
import theory

bot = telebot.TeleBot(token)  # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π bot, —Å –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å

answer = 0


# –í—ã–≤–æ–¥ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
@bot.message_handler(commands=['start'])  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã start (–º–æ–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–µ–æ –∫–æ–º–∞–Ω–¥)
def start(message):  # –°–∞–º–∞ —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã, message - –ø–æ–ª—É—á–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not sql_requests.check_db(message.from_user.id):
        sql_requests.create_user_db(message.from_user.id)
    sti = open('sticker.webp', 'rb')
    bot.send_sticker(message.chat.id, sti)
    mess = f'–ü—Ä–∏–≤–µ—Ç, <ins><b>{message.from_user.first_name}</b></ins>!\n' \
           f'–Ø –ë–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –∏–∑—É—á–∏—Ç—å –æ—Å–Ω–æ–≤—ã Python! üêç'  # –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.send_message(message.chat.id, mess, parse_mode='html')
    menu(message)


# –ú–µ—Ç–æ–¥ –¥–ª—è —É–ª–∞–≤–ª–∏–≤–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if call.message:
        if call.data == 'next_btn':
            send_lesson(call)
            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        elif call.data == 'test_btn':
            prog_stat = sql_requests.get_progress(call.from_user.id)["progress"]
            if prog_stat == 0:
                send_test(call, theory.test_1_v1, theory.test_1_v2, theory.test_1_v3, theory.test_1)
            elif prog_stat == 1:
                send_test(call, theory.test_2_v1, theory.test_2_v2, theory.test_2_v3, theory.test_2)
            elif prog_stat == 1.5:
                send_test(call, theory.test_2_2_v1, theory.test_2_2_v2, theory.test_2_2_v3, theory.test_2_2)
            elif prog_stat == 2:
                send_test(call, theory.test_3_v1, theory.test_3_v2, theory.test_3_v3, theory.test_3)
            elif prog_stat == 3:
                send_test(call, theory.test_4_v1, theory.test_4_v2, theory.test_4_v3, theory.test_4)
            elif prog_stat == 4:
                send_test(call, theory.test_5_v1, theory.test_5_v2, theory.test_5_v3, theory.test_5)
            elif prog_stat == 5:
                send_test(call, theory.test_6_v1, theory.test_6_v2, theory.test_6_v3, theory.test_6)
            elif prog_stat == 5.5:
                send_test(call, theory.test_6_2_v1, theory.test_6_2_v2, theory.test_6_2_v3, theory.test_6_2)
            elif prog_stat == 6:
                send_test(call, theory.test_7_v1, theory.test_7_v2, theory.test_7_v3, theory.test_7)
            elif prog_stat == 7:
                send_test(call, theory.test_8_v1, theory.test_8_v2, theory.test_8_v3, theory.test_8)

        elif call.data == 'var_false':
            send_false(call)

        elif call.data == 'var_right':
            send_right(call)

        elif call.data == 'teor_1':
            prog_stat = sql_requests.get_progress(call.from_user.id)["progress"]
            if prog_stat >= 1:
                send_theory(call, theory.lesson_1, theory.theory_1_mess)
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text="–ú–æ–¥—É–ª—å 1:", reply_markup=None, parse_mode='html')
            else:
                bot.answer_callback_query(callback_query_id=call.id,
                                          text='–ü–æ–∫–∞ —É—Ä–æ–∫ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω, —Ç–µ–æ—Ä–∏—è –∫ –Ω–µ–º—É –∑–∞–∫—Ä—ã—Ç–∞‚ùå')
        elif call.data == 'teor_2':
            prog_stat = sql_requests.get_progress(call.from_user.id)["progress"]
            if prog_stat >= 2:
                send_theory(call, theory.lesson_2, theory.theory_2_mess)
                send_theory(call, theory.lesson_2, theory.theory_2_2_mess)
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text="–ú–æ–¥—É–ª—å 1:", reply_markup=None, parse_mode='html')
            else:
                bot.answer_callback_query(callback_query_id=call.id,
                                          text='–ü–æ–∫–∞ —É—Ä–æ–∫ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω, —Ç–µ–æ—Ä–∏—è –∫ –Ω–µ–º—É –∑–∞–∫—Ä—ã—Ç–∞‚ùå')

        elif call.data == 'teor_3':
            prog_stat = sql_requests.get_progress(call.from_user.id)["progress"]
            if prog_stat >= 3:
                send_theory(call, theory.lesson_3, theory.theory_3_mess)
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text="–ú–æ–¥—É–ª—å 1:", reply_markup=None, parse_mode='html')
            else:
                bot.answer_callback_query(callback_query_id=call.id,
                                          text='–ü–æ–∫–∞ —É—Ä–æ–∫ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω, —Ç–µ–æ—Ä–∏—è –∫ –Ω–µ–º—É –∑–∞–∫—Ä—ã—Ç–∞‚ùå')
        elif call.data == 'teor_4':
            prog_stat = sql_requests.get_progress(call.from_user.id)["progress"]
            if prog_stat >= 4:
                send_theory(call, theory.lesson_4, theory.theory_4_mess)
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text="–ú–æ–¥—É–ª—å 1:", reply_markup=None, parse_mode='html')
            else:
                bot.answer_callback_query(callback_query_id=call.id,
                                          text='–ü–æ–∫–∞ —É—Ä–æ–∫ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω, —Ç–µ–æ—Ä–∏—è –∫ –Ω–µ–º—É –∑–∞–∫—Ä—ã—Ç–∞‚ùå')
        elif call.data == 'teor_5':
            prog_stat = sql_requests.get_progress(call.from_user.id)["progress"]
            if prog_stat >= 5:
                send_theory(call, theory.lesson_5, theory.theory_5_mess)
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text="–ú–æ–¥—É–ª—å 1:", reply_markup=None, parse_mode='html')
            else:
                bot.answer_callback_query(callback_query_id=call.id,
                                          text='–ü–æ–∫–∞ —É—Ä–æ–∫ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω, —Ç–µ–æ—Ä–∏—è –∫ –Ω–µ–º—É –∑–∞–∫—Ä—ã—Ç–∞‚ùå')
        elif call.data == 'teor_6':
            prog_stat = sql_requests.get_progress(call.from_user.id)["progress"]
            if prog_stat >= 6:
                send_theory(call, theory.lesson_6, theory.theory_6_mess)
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text="–ú–æ–¥—É–ª—å 1:", reply_markup=None, parse_mode='html')
            else:
                bot.answer_callback_query(callback_query_id=call.id,
                                          text='–ü–æ–∫–∞ —É—Ä–æ–∫ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω, —Ç–µ–æ—Ä–∏—è –∫ –Ω–µ–º—É –∑–∞–∫—Ä—ã—Ç–∞‚ùå')
        elif call.data == 'teor_7':
            prog_stat = sql_requests.get_progress(call.from_user.id)["progress"]
            if prog_stat >= 7:
                send_theory(call, theory.lesson_7, theory.theory_7_mess)
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text="–ú–æ–¥—É–ª—å 1:", reply_markup=None, parse_mode='html')
            else:
                bot.answer_callback_query(callback_query_id=call.id,
                                          text='–ü–æ–∫–∞ —É—Ä–æ–∫ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω, —Ç–µ–æ—Ä–∏—è –∫ –Ω–µ–º—É –∑–∞–∫—Ä—ã—Ç–∞‚ùå')
        elif call.data == 'teor_8':
            prog_stat = sql_requests.get_progress(call.from_user.id)["progress"]
            if prog_stat >= 8:
                send_theory(call, theory.lesson_8, theory.theory_8_mess)
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text="–ú–æ–¥—É–ª—å 1:", reply_markup=None, parse_mode='html')
            else:
                bot.answer_callback_query(callback_query_id=call.id,
                                          text='–ü–æ–∫–∞ —É—Ä–æ–∫ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω, —Ç–µ–æ—Ä–∏—è –∫ –Ω–µ–º—É –∑–∞–∫—Ä—ã—Ç–∞‚ùå')

        elif call.data == 'to_theory':
            theorys(call, call.message)


# –í—ã–≤–æ–¥ —Ç–µ–æ—Ä–∏–∏
def send_theory(call, name, theory_text):
    bot.send_message(call.message.chat.id, text=name, parse_mode='html')
    markup = types.InlineKeyboardMarkup(row_width=1)
    btn_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='to_theory')
    markup.add(btn_back)
    bot.send_message(call.message.chat.id, text=theory_text, parse_mode='html', reply_markup=markup)


def send_lesson(call):
    prog_stat = sql_requests.get_progress(call.from_user.id)["progress"]
    markup_to_test = types.InlineKeyboardMarkup(row_width=1)
    btn_to_test = types.InlineKeyboardButton("–ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ç–µ—Å—Ç—É ‚¨á", callback_data='test_btn')
    markup_to_test.add(btn_to_test)
    if prog_stat == 0:
        bot.send_message(call.message.chat.id, theory.module_1, parse_mode='html')
        bot.send_message(call.message.chat.id, theory.lesson_1, parse_mode='html')
        bot.send_message(call.message.chat.id, theory.theory_1_mess, parse_mode='html', reply_markup=markup_to_test)
    elif prog_stat == 1:
        bot.send_message(call.message.chat.id, theory.lesson_2, parse_mode='html')
        bot.send_message(call.message.chat.id, theory.theory_2_mess, parse_mode='html', reply_markup=markup_to_test)
    elif prog_stat == 2:
        bot.send_message(call.message.chat.id, theory.lesson_2, parse_mode='html')
        bot.send_message(call.message.chat.id, theory.theory_2_2_mess, parse_mode='html', reply_markup=markup_to_test)
    elif prog_stat == 3:
        bot.send_message(call.message.chat.id, theory.lesson_3, parse_mode='html')
        bot.send_message(call.message.chat.id, theory.theory_3_mess, parse_mode='html', reply_markup=markup_to_test)
    elif prog_stat == 4:
        bot.send_message(call.message.chat.id, theory.lesson_4, parse_mode='html')
        bot.send_message(call.message.chat.id, theory.theory_4_mess, parse_mode='html', reply_markup=markup_to_test)
    elif prog_stat == 5:
        bot.send_message(call.message.chat.id, theory.lesson_5, parse_mode='html')
        bot.send_message(call.message.chat.id, theory.theory_5_mess, parse_mode='html', reply_markup=markup_to_test)
    elif prog_stat == 6:
        bot.send_message(call.message.chat.id, theory.lesson_6, parse_mode='html')
        bot.send_message(call.message.chat.id, theory.theory_6_mess, parse_mode='html', reply_markup=markup_to_test)
    elif prog_stat == 7:
        bot.send_message(call.message.chat.id, theory.lesson_6, parse_mode='html')
        bot.send_message(call.message.chat.id, theory.theory_6_2_mess, parse_mode='html', reply_markup=markup_to_test)
    elif prog_stat == 8:
        bot.send_message(call.message.chat.id, theory.lesson_7, parse_mode='html')
        bot.send_message(call.message.chat.id, theory.theory_7_mess, parse_mode='html', reply_markup=markup_to_test)
    elif prog_stat == 9:
        bot.send_message(call.message.chat.id, theory.lesson_8, parse_mode='html')
        bot.send_message(call.message.chat.id, theory.theory_8_mess, parse_mode='html', reply_markup=markup_to_test)


# –í—ã–≤–æ–¥ —Ç–µ—Å—Ç–∞
def send_test(call, var_1, var_2, var_3r, test):
    bot.send_message(call.message.chat.id,
                     text='–í—ã–ø–æ–ª–Ω–∏ —Ç–µ—Å—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞ 2 –ø–æ–ø—ã—Ç–∫–∏, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É–µ—â–µ–º—É —É—Ä–æ–∫—É',
                     reply_markup=None)

    markup_test = types.InlineKeyboardMarkup(row_width=3)

    btn_var_1 = types.InlineKeyboardButton(var_1, callback_data='var_false')
    btn_var_2 = types.InlineKeyboardButton(var_2, callback_data='var_false')
    btn_var_3r = types.InlineKeyboardButton(var_3r, callback_data='var_right')

    num = random.randint(1, 3)

    if num == 1:
        markup_test.add(btn_var_1, btn_var_2, btn_var_3r)
    elif num == 2:
        markup_test.add(btn_var_1, btn_var_3r, btn_var_2)
    elif num == 3:
        markup_test.add(btn_var_3r, btn_var_1, btn_var_2)
    bot.send_message(call.message.chat.id, text=test, parse_mode='html', reply_markup=markup_test)
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–µ—Å—Ç
def send_right(call):
    bot.send_message(call.message.chat.id, text='‚úÖ–í–µ—Ä–Ω–æ!‚úÖ', reply_markup=None)
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

    prog_stat = sql_requests.get_progress(call.from_user.id)["progress"]

    sql_requests.add_points(call.from_user.id, 2)
    if prog_stat == 1 or prog_stat == 5:
        sql_requests.add_progress(call.from_user.id, 0.5)
    else:
        sql_requests.add_progress(call.from_user.id, 1)

    markup_next = types.InlineKeyboardMarkup(row_width=1)
    btn_next = types.InlineKeyboardButton("–ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —É—Ä–æ–∫—É ‚¨á", callback_data='next_btn')
    markup_next.add(btn_next)
    bot.send_message(call.message.chat.id, "–ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É?", reply_markup=markup_next,
                     parse_mode='html')


# –û–±—Ä–∞–±–∞—Ç—ã–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–µ—Å—Ç
def send_false(call):
    if main.answer <= 0:
        main.answer = main.answer + 1
        bot.answer_callback_query(callback_query_id=call.id, text='‚ùå–ù–µ–≤–µ—Ä–Ω–æ!‚ùå')
    elif main.answer >= 1:
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        bot.send_message(call.message.chat.id, text='‚ùå–¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫, –ø—Ä–æ—á–∏—Ç–∞–π —Ç–µ–æ—Ä–∏—é '
                                                    '–µ—â–µ —Ä–∞–∑ –∏ –ø–æ–ø—Ä–æ–±–Ω—É—é —Å–Ω–æ–≤–∞.',
                         reply_markup=None)
        main.answer = 0
        send_lesson(call)


# –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
def profile(message):
    points = sql_requests.get_point(message.from_user.id)
    progress = sql_requests.get_progress(message.from_user.id)
    bot.send_message(message.chat.id, f'üë§–ü—Ä–æ—Ñ–∏–ª—å <ins><b>{message.from_user.first_name}</b></ins>:\n'
                                      f'‚ö° –ë–∞–ª–ª—ã: {points["point"]}\n'
                                      f'üåü–£—Ä–æ–∫–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: {progress["progress"]} –∏–∑ 8 —É—Ä–æ–∫–æ–≤',
                     parse_mode='html')


# –í—ã–≤–æ–¥ —É—Ä–æ–∫–∞
def learning(message):
    to_menu(message, theory.start_mess1)

    markup_next = types.InlineKeyboardMarkup(row_width=1)
    btn_next = types.InlineKeyboardButton("–ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —É—Ä–æ–∫—É ‚¨á", callback_data='next_btn')
    markup_next.add(btn_next)
    bot.send_message(message.chat.id, theory.lesson_0, reply_markup=markup_next, parse_mode='html')


# –í—ã–≤–æ–¥ –º–µ–Ω—é —Ç–µ–æ—Ä–∏–∏
def theorys(message, message1):
    prog = sql_requests.get_progress(message.from_user.id)["progress"]
    close1 = 'üîí'
    close2 = 'üîí'
    close3 = 'üîí'
    close4 = 'üîí'
    close5 = 'üîí'
    close6 = 'üîí'
    close7 = 'üîí'
    close8 = 'üîí'

    if prog >= 1:
        close1 = '‚úÖ'
    if prog >= 2:
        close2 = '‚úÖ'
    if prog >= 3:
        close3 = '‚úÖ'
    if prog >= 4:
        close4 = '‚úÖ'
    if prog >= 5:
        close5 = '‚úÖ'
    if prog >= 6:
        close6 = '‚úÖ'
    if prog >= 7:
        close7 = '‚úÖ'
    if prog >= 8:
        close8 = '‚úÖ'

    theor_mess = "üìñ–¢–µ–æ—Ä–∏—è\n" \
                 "(–ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤—Å—é —Ç–µ–æ—Ä–∏—é, –ø—Ä–æ–π–¥–∏ –≤—Å–µ —É—Ä–æ–∫–∏)."
    to_menu(message1, theor_mess)
    markup = types.InlineKeyboardMarkup(row_width=1)
    btn_teor_1 = types.InlineKeyboardButton("–£—Ä–æ–∫ 1: –í–≤–µ–¥–µ–Ω–∏–µ. –û Python." + close1, callback_data='teor_1')
    btn_teor_2 = types.InlineKeyboardButton("–£—Ä–æ–∫ 2: Hello world." + close2, callback_data='teor_2')
    btn_teor_3 = types.InlineKeyboardButton("–£—Ä–æ–∫ 3: –ü—Ä–æ—Å—Ç—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏." + close3, callback_data='teor_3')
    btn_teor_4 = types.InlineKeyboardButton("–£—Ä–æ–∫ 4: –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö." + close4, callback_data='teor_4')
    btn_teor_5 = types.InlineKeyboardButton("–£—Ä–æ–∫ 5: –í–µ—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞." + close5, callback_data='teor_5')
    btn_teor_6 = types.InlineKeyboardButton("–£—Ä–æ–∫ 6: –í–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å." + close6, callback_data='teor_6')
    btn_teor_7 = types.InlineKeyboardButton("–£—Ä–æ–∫ 7: –ß–∞—Å—Ç–Ω–æ–µ –æ—Ç –¥–µ–ª–µ–Ω–∏—è." + close7, callback_data='teor_7')
    btn_teor_8 = types.InlineKeyboardButton("–£—Ä–æ–∫ 8: –û—Å—Ç–∞—Ç–æ–∫" + close8, callback_data='teor_8')
    markup.add(btn_teor_1, btn_teor_2, btn_teor_3, btn_teor_4, btn_teor_5, btn_teor_6, btn_teor_7, btn_teor_8)
    bot.send_message(message1.chat.id, text="–ú–æ–¥—É–ª—å 1:", parse_mode='html', reply_markup=markup)


# –í—ã–≤–æ–¥ –º–µ–Ω—é
def menu(message):
    menu_markup = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                            row_width=1)  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é (—Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–æ–∫, –∏ –∫–æ–ª-–≤–æ –≤ —Ä—è–¥—É):
    btn_learn = types.KeyboardButton('üìö–û–±—É—á–µ–Ω–∏–µüìö')
    btn_profile = types.KeyboardButton('üë§–ü—Ä–æ—Ñ–∏–ª—åüë§')
    btn_theory = types.KeyboardButton('üìñ–¢–µ–æ—Ä–∏—èüìñ')
    menu_markup.add(btn_learn, btn_profile, btn_theory)
    bot.send_message(message.chat.id, "‚ö™Ô∏è<ins><b>–ú–µ–Ω—é:</b></ins>‚ö™Ô∏è", reply_markup=menu_markup, parse_mode='html')


# –ö–Ω–æ–ø–∫–∞ "–í–µ—Ä–Ω—É—Ç—Å—è –≤ –º–µ–Ω—é"
def to_menu(message, mess):
    to_menu_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    btn_to_menu = types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é')
    to_menu_markup.add(btn_to_menu)
    bot.send_message(message.chat.id, mess, reply_markup=to_menu_markup, parse_mode='html')


# –õ–æ–≤–∏—Ç –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
@bot.message_handler()
def call_menu(message):
    if message.text == 'üìö–û–±—É—á–µ–Ω–∏–µüìö':
        learning(message)
    elif message.text == 'üë§–ü—Ä–æ—Ñ–∏–ª—åüë§':
        profile(message)
    elif message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
        menu(message)
    elif message.text == 'üìñ–¢–µ–æ—Ä–∏—èüìñ':
        theorys(message, message)


bot.polling(none_stop=True)
